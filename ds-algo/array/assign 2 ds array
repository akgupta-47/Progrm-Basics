//////////////////////////////////////////////////////
#include <iostream>

using namespace std;

int main()
{
    int i,j,n;
    cout<<"enter size of matrix\n";
    cin>>n;
    int arr[n];
    cout<<"enter elements of matrix\n";  
    for(i=0;i<n;i++){
        cin>>arr[i];
    }
    cout<<"the matrix is\n";
    for(i=0;i<n;i++){
        for(j=0;j<n;j++){
            if(i==j){
                cout<<arr[i]<<" ";
            }else{
                cout<<"0 ";
            }
        }
        cout<<endl;
    }

    return 0;
}
///////////////////////////////////////////////////
#include <iostream>

using namespace std;

int main()
{
    int i,j,n,k=0;
    cout<<"enter size of matrix\n";
    cin>>n;
    int size=(n*(n+2))/2;
    int arr[size];
    cout<<"enter elements\n";
    for(i=0;i<size;i++){
        cin>>arr[i];
    }
    cout<<"the matrix is\n";
    for(i=0;i<n;i++){
        for(j=0;j<n;j++){
            if(i-j==1 || i-j==0 || i-j==-1){
                cout<<arr[k]<<" ";
                k++;
            }else{
                cout<<"0 ";
            }
        }
        cout<<endl;
    }

    return 0;
}
///////////////////////////////////////////////
#include <iostream>

using namespace std;

int main()
{
    int i,j,n,k=0;
    cout<<"enter size of matrix\n";
    cin>>n;
    int size=(n*(n+2))/2;
    int arr[size];
    cout<<"enter elements\n";
    for(i=0;i<size;i++){
        cin>>arr[i];
    }
    cout<<"the lower matrix is\n";
    for(i=0;i<n;i++){
        for(j=0;j<n;j++){
            if(i>=j){
                cout<<arr[k]<<" ";
                k++;
            }else{
                cout<<"0 ";
            }
        }
        cout<<endl;
    }
    cout<<"the upper matrix is\n";
    k=0;
    for(i=0;i<n;i++){
        for(j=0;j<n;j++){
            if(i<=j){
                cout<<arr[k]<<" ";
                k++;
            }else{
                cout<<"0 ";
            }
        }
        cout<<endl;
    }

    return 0;
}
/////////////////////////////////////////////////
//Symmetric matrix
#include<iostream>
#include<stdlib.h>

using namespace std;

int main()
{
    int n, k=0;
    cout<<"Enter the order of the matrix: ";
    cin>>n;
    if(n==1)
    {
        cout<<"A symmetric matrix cannot be formed with the given dimensions!";
        return 1;
    }
    int *a = new int[(n*(n+1))/2];
    cout<<"Enter the elements of the symmetric matrix:\n";
    for(int i=0; i<(n*(n+1))/2; i++)
    {
            cin>>a[k];
            k++;
    }
    k=0;
    int l, m;
    cout<<"The symmetric matrix is:\n";
    for(int i=0; i<n; i++)
    {
        z=0;
	w=0;
        for(int j=0; j<n; j++, w=1)
        {
            if(j<i)
            {
                z=(n-j)*w+z;
                cout<<a[i+z]<<" ";
            }
            else
            {
                cout<<a[k]<<" ";
                k++;
            }
        }
        cout<<"\n";
    }
    delete []a;
    return 0;
}
////////////////////////////////////////////////////
#include <iostream>

using namespace std;

int main()
{
    int n;
    cout<<"Enter the order of matrix";
    cin>>n;
    int i,j,arr[n][n];
    cout<<"Enter the elements of matrix";
    for(i=0;i<n;i++){
        for(j=0;j<n;j++){
            cin>>arr[i][j];
        }
    }
   int sum = 0;
   for (i = 0;i<n;++i) {
      for (j = 0;j < n;++j) {
         sum=sum+arr[i][j];
      }
      cout<<"Sum of the row "<<i<<": "<<sum<<endl;
      sum = 0;
   }
    for (i = 0;i<n;++i) {
      for (j = 0;j < n;++j) {
         sum=sum+arr[j][i];
      }
      cout<<"Sum of the column "<<i<<": "<<sum<<endl;
      sum = 0;
   }

    return 0;
}
/////////////////////////////////////////////////////////
//Saddle point
#include <iostream>
#include<stdlib.h>
const int n=3;

using namespace std;
bool Saddle(int a[][n], int x,int y){
    int l;
    int m=0;
    for(l=0;l<n;l++){
        if(a[x][y] >= a[l][y] && a[x][y] <= a[x][l]){
            m++;}
    }
    if(m == 3) return true;
    else return false;
}

int main()
{
    int arr[n][n];
    cout<<"Enter elements of array\n";
    int i,j;
    for(i=0;i<n;i++){
        for(j=0;j<n;j++){
            cin>>arr[i][j];
        }
    }
    cout<<"Now find the saddle point\n";
    for(i=0;i<n;i++){
        for(j=0;j<n;j++){
            if(!Saddle(arr,i,j))
                continue;
            else
                cout<<"The saddle point is "<<arr[i][j];
        }
    }
    
    return 0;
}
//////////////////////////////////////////////////////////////////
//Spiral 1
#include <iostream> 
using namespace std; 
#define R 3 
#define C 3

int spiralMat(int a[R][C],int m, int n) 
{ 
	int i, k = 0, l = 0,t=0; 
	int *newAr;
	newAr = new int[m*n];
	while (k<m && l<n) {
		for (i=l; i<n;++i) { 
			newAr[t]=a[k][i];
			t++;
		} 
		k++;
		for (i=k; i<m; ++i) { 
            		newAr[t]=a[i][n - 1];
            		t++;
		} 
		n--;
		if (k<m) { 
			for (i=n-1; i>=l; --i) { 
			    newAr[t]=a[m - 1][i];
			    t++;
			} 
			m--; 
		}
		if (l<n) { 
			for (i=m-1; i>=k; --i) { 
				newAr[t]=a[i][l];
				t++;
			} 
			l++; 
		} 
	} 
	int b=sizeof(newAr)/sizeof(newAr[0]);
	for(i=0;i<b;i++){
	    cout<<newAr[i]<<" ";
	}
	delete []newAr;
}
int main() 
{
	int a[R][C];
	cout<<"enter the elements\n";
	int i,j;
	for(i=0;i<R;i++){
	    for(j=0;j<C;j++){
	        cin>>a[i][j];
	    }
	}

	spiralMat(a, R, C); 
	return 0; 
} 
/////////////////////////////////////////////////////
// Spiral 2
#include <iostream> 
using namespace std; 
#define D 3 

int spiralMat(int a[][D],int m, int n,int retAr[][D]) 
{ 
	int i, k = 0, l = 0,t=0; 
	int *newAr;
	newAr = new int[m*n];
	while (k<m && l<n) {
		for (i=l; i<n;i++) { 
			newAr[t]=a[k][i];
			t++;
		} 
		k++;
		for (i=k; i<m; i++) { 
            		newAr[t]=a[i][n-1];
            		t++;
		} 
		n--;
		if(k<m){ 
			for (i=n-1; i>=l; i--) { 
			    newAr[t]=a[m-1][i];
			    t++;
			} 
			m--; 
		}
		if(l<n){ 
			for (i=m-1; i>=k; i--) { 
				newAr[t]=a[i][l];
				t++;
			} 
			l++; 
		} 
	} 
	l=0;
	for(i=0;i<D;i++){
	    for(k=0;k<D;k++){
	        retAr[i][k]=newAr[l++];
	    }
	}
	delete []newAr;
}
int main() 
{
	int a[D][D];
	int i,j,k=0;
	for(i=0;i<D;i++){
	    for(j=0;j<D;j++){
	        a[i][j]=++k;
	    }
	}
    int retAr[D][D]; 
	spiralMat(a, D, D, retAr);
	cout<<"Display the new array\n";
	for(i=0;i<D;i++){
	    for(j=0;j<D;j++){
	        cout<<retAr[i][j]<<" ";
	    }
	    cout<<endl;
	}
	return 0; 
} 
//////////////////////////////////////////////////////
//sparse
#include<iostream>
using namespace std;
#define MAX 10
void readSparse(int b[][3])
{
    int i;
    cout<<"Enter size of the matrix:\n";
    cin>>b[0][0]>>b[0][1];
    cout<<"Enter no. of non-zero elements:\n";
    cin>>b[0][2];
    for(i = 1; i <= b[0][2]; i++)
    {   cout<<"Enter triplet (row, column, value) :\n";
        cin>>b[i][0]>>b[i][1]>>b[i][2];
    }
}

void printSparse(int b[][3])
{
    int i,j,k = 1;
    for(i = 0; i < b[0][0]; i++)
    {   for(j = 0; j < b[0][1]; j++)
        { if(b[k][0] == i && b[k][1] == j)
          {   cout<<b[k][2]<<" ";
              k++;
          }
          else
              cout<<"0 ";
        }
        cout<<endl;
    }
}
/*
void transpose(int a[][3], int b[][3])
{
    int i,j,k=1;
    b[0][0] = a[0][1];
    b[0][1] = a[0][0];
    b[0][2] = a[0][2];
    if(b[0][2] > 0)
    {    for(i=0;i<a[0][1];i++)
         {    for(j=1;j<=a[0][2];j++)
              {    if(a[j][1]==i)
                   {    b[k][0] = a[j][1];
                        b[k][1] = a[j][0];
                        b[k][2] = a[j][2];
                        k++;
                   }
              }
         }
    }
}

int add(int sp1[][3], int sp2[][3], int sp3[][3])
{   int k1, k2, k3, tot1, tot2;
    if(sp1[0][0] == sp2[0][0] && sp1[0][1] == sp2[0][1])
    {    tot1 = sp1[0][2]; tot2 = sp2[0][2];
         k1 = k2 = k3 = 1;
         while ( k1 <= tot1 && k2 <= tot2)
         {    if ( sp1[k1][0] < sp2[k2][0] )
              {    sp3[k3][0] = sp1[k1][0];
                   sp3[k3][1] = sp1[k1][1];
                   sp3[k3][2] = sp1[k1][2];
                   k3++; k1++;
              }
              else if ( sp1[k1][0] > sp2[k2][0] )
              {    sp3[k3][0] = sp2[k2][0];
                   sp3[k3][1] = sp2[k2][1];
                   sp3[k3][2] = sp2[k2][2];
                   k3++; k2++;
              }
              else
              {    if ( sp1[k1][1] < sp2[k2][1] )
                   {    sp3[k3][0] = sp1[k1][0];
                        sp3[k3][1] = sp1[k1][1];
                        sp3[k3][2] = sp1[k1][2];
                        k3++; k1++;
                   }
                   else if ( sp1[k1][1] > sp2[k2][1] )
                   {    sp3[k3][0] = sp2[k2][0];
                        sp3[k3][1] = sp2[k2][1];
                        sp3[k3][2] = sp2[k2][2];
                        k3++; k2++;
                   }
                   else
                   {    sp3[k3][0] = sp2[k2][0];
                        sp3[k3][1] = sp2[k2][1];
                        sp3[k3][2] = sp1[k1][2] + sp2[k2][2];
                        k3++; k2++; k1++;
                   }
              }
         }
         while ( k1 <=tot1 )
         {    sp3[k3][0] = sp1[k1][0];
              sp3[k3][1] = sp1[k1][1];
              sp3[k3][2] = sp1[k1][2];
              k3++; k1++;
         }
         while ( k2 <= tot2 )
         {    sp3[k3][0] = sp2[k2][0];
              sp3[k3][1] = sp2[k2][1];
              sp3[k3][2] = sp2[k2][2];
              k3++; k2++;
         }
         sp3[0][0] = sp1[0][0];
         sp3[0][1] = sp1[0][1];
         sp3[0][2] = k3-1;
    }
    else
         printf("\nInvalid Dimensions.\n");
}

void multiply(int sp1[][3], int sp2[][3], int sp3[][3])
{
    int k1,k2,k3,i,mat1RNo,mat2CNo,sum,tot1,tot2;

    int sp2Transpose[MAX][3];
    tot1=sp1[0][2];tot2=sp2[0][2];

    if(sp1[0][1] == sp2[0][0])
    {
        transpose(sp2,sp2Transpose);
        k1 = k3 = 1;
        while(k1 <= tot1)
        {
            i = k1;
            k2 = 1;
            while(k2 <= tot2)
            {
                mat1RNo = sp1[k1][0];
                mat2CNo = sp2Transpose[k2][0];
                sum = 0;
                while(k1 <= tot1 && k2 <= tot2 && mat1RNo == sp1[k1][0] && mat2CNo == sp2Transpose[k2][0])
                {   if(sp1[k1][1] == sp2Transpose[k2][1])
                    {    sum = sum + sp1[k1][2] * sp2Transpose[k2][2];
                         k1++; k2++;
                    }
                    else if(sp1[k1][1] < sp2Transpose[k2][1])
                         k1++;
                    else
                         k2++;
                }
                if(sum != 0)
                {   sp3[k3][0] = mat1RNo;
                    sp3[k3][1] = mat2CNo;
                    sp3[k3][2] = sum;
                    k3++;
                }
                if(k2 <= tot2)
                    k1 = i;
                while(mat2CNo == sp2Transpose[k2][0] && k2 <= tot2)
                    k2++;
            }
            while(mat1RNo == sp1[k1][0] && k1 <= tot1)
                k1++;
        }
        sp3[0][0] = sp1[0][0];
        sp3[0][1] = sp2Transpose[0][0];
        sp3[0][2] = k3-1;
    }
}*/

int main()
{
  int a[MAX][3], b[MAX][3], c[MAX][3];
  readSparse(a);
  cout<<"The matrix is...\n";
  printSparse(a);
  /*transpose(a,b);
  cout<<"the transposed matrix is: \n";
  printSparse(b);
  add(a,b,c);
  cout<<"the added matrix is: \n";
  printSparse(c);
  multiply(a,b,c);
  cout<<"The multiplied matrix is...\n";
  printSparse(c);*/
  return 0;
}


